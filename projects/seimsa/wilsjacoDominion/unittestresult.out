--------------------TESTING GAINCARD()---------------------
Test player 0 with 1 cards to add to the player's discard pile.
Discard test passed for player 0!

Test player 0 with 1 cards to add to the player's deck.
Deck test passed for player 0!

Test player 0 with 1 cards to add to the player's hand.
Hand test passed for player 0!

Test player 0 with 2 cards to add to the player's discard pile.
Discard test passed for player 0!

Test player 0 with 2 cards to add to the player's deck.
Deck test passed for player 0!

Test player 0 with 2 cards to add to the player's hand.
Hand test passed for player 0!

Test player 0 with 3 cards to add to the player's discard pile.
Discard test passed for player 0!

Test player 0 with 3 cards to add to the player's deck.
Deck test passed for player 0!

Test player 0 with 3 cards to add to the player's hand.
Hand test passed for player 0!

Test player 0 with 4 cards to add to the player's discard pile.
Discard test passed for player 0!

Test player 0 with 4 cards to add to the player's deck.
Deck test passed for player 0!

Test player 0 with 4 cards to add to the player's hand.
Hand test passed for player 0!

Test player 0 with 5 cards to add to the player's discard pile.
Discard test passed for player 0!

Test player 0 with 5 cards to add to the player's deck.
Deck test passed for player 0!

Test player 0 with 5 cards to add to the player's hand.
Hand test passed for player 0!

Test player 1 with 1 cards to add to the player's discard pile.
Discard test passed for player 1!

Test player 1 with 1 cards to add to the player's deck.
Deck test passed for player 1!

Test player 1 with 1 cards to add to the player's hand.
Hand test passed for player 1!

Test player 1 with 2 cards to add to the player's discard pile.
Discard test passed for player 1!

Test player 1 with 2 cards to add to the player's deck.
Deck test passed for player 1!

Test player 1 with 2 cards to add to the player's hand.
Hand test passed for player 1!

Test player 1 with 3 cards to add to the player's discard pile.
Discard test passed for player 1!

Test player 1 with 3 cards to add to the player's deck.
Deck test passed for player 1!

Test player 1 with 3 cards to add to the player's hand.
Hand test passed for player 1!

Test player 1 with 4 cards to add to the player's discard pile.
Discard test passed for player 1!

Test player 1 with 4 cards to add to the player's deck.
Deck test passed for player 1!

Test player 1 with 4 cards to add to the player's hand.
Hand test passed for player 1!

Test player 1 with 5 cards to add to the player's discard pile.
Discard test passed for player 1!

Test player 1 with 5 cards to add to the player's deck.
Deck test passed for player 1!

Test player 1 with 5 cards to add to the player's hand.
Hand test passed for player 1!

-------------------TESTING DISCARDCARD()---------------------

Test player 0 with 1 cards to discard.
state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 0!

Test player 0 with 2 cards to discard.
state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 0!

state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 0!

Test player 0 with 3 cards to discard.
state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 0!

state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 0!

state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 0!

Test player 0 with 4 cards to discard.
state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 0!

state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 0!

state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 0!

state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 0!

Test player 0 with 5 cards to discard.
state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 0!

state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 0!

state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 0!

state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 0!

state->hand[player][handPos]: -1, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 0!

Test player 1 with 1 cards to discard.
state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 1!

Test player 1 with 2 cards to discard.
state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 1!

state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 1!

Test player 1 with 3 cards to discard.
state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 1!

state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 1!

state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 1!

Test player 1 with 4 cards to discard.
state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 1!

state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 1!

state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 1!

state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 1!

Test player 1 with 5 cards to discard.
state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 1!

state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 1!

state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 1!

state->hand[player][handPos]: 4, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 1!

state->hand[player][handPos]: -1, state->playedCards[state->playedCardCount]: 387389207
Test failed!! Discard card did not get added to played pile for player 1!

------------------------------TESTING Card: Smithy -----------------------------------
TEST: Player gains +3 cards
Hand count = 8, Expected = 7
Hand count is incorrect for player 0.
Hand count test failed for player 0!

Deck count = 1, Expected = 2
Deck count is incorrect for player 0.
Deck count test failed for player 0!

Coins = 4, Expected = 4
Coin count test passed for player 0!

**Checking the state of player 1 to ensure the Smithy card played by player 0 did not change other player's state.**

Hand count = 0, Expected = 0
Hand count test passed for player 1!

Deck count = 10, Expected = 10
Deck count test passed for player 1!

Coins = 4, Expected = 4
Coin count test passed for player 1!

Checking that Kingdom and Victory cards counts did not change due to Smithy card being played.
Kingdom and Victory card test passed!

--------------------------------------------------------------------------------

------------------------------TESTING Card: Adventurer -----------------------------------
TEST1: Player's deck is not empty.

Hand count = 7, Expected = 6
Hand count is incorrect for player 0.
Hand count test failed for player 0!

Deck count = 3, Expected = 3
Deck count test passed for player 0!

Coins = 4, Expected = 4
Coin count test passed for player 0!

**Checking the state of player 1 to ensure the Adventurer card played by player 0 did not change other player's state.**

Hand count = 0, Expected = 0
Hand count test passed for player 1!

Deck count = 10, Expected = 10
Deck count test passed for player 1!

Coins = 4, Expected = 4
Coin count test passed for player 1!

Checking that Kingdom and Victory cards counts did not change due to Smithy card being played.
Kingdom and Victory card test passed!

TEST2: Player's deck is empty and must be shuffled before drawing cards.

deck count: 0
Hand count = 5, Expected = 7
Hand count is incorrect for player 0.
Hand count test failed for player 0!

Coins = 4, Expected = 4
Coin count test passed for player 0!

**Checking the state of player 1 to ensure the Smithy card played by player 0 did not change other player's state.**

Hand count = 0, Expected = 0
Hand count test passed for player 1!

Deck count = 10, Expected = 10
Deck count test passed for player 1!

Coins = 4, Expected = 4
Coin count test passed for player 1!

Checking that Kingdom and Victory cards counts did not change due to Smithy card being played.
Kingdom and Victory card test passed!

--------------------------------------------------------------------------------

------------------------------TESTING Card: Cutpurse -----------------------------------
TEST1: Player gains +2 coins and all other players discard the coppers in there hands.
Hand count = 4, Expected = 4
Hand count test passed for player 0!

Deck count = 5, Expected = 5
Deck count test passed for player 0!

Coins = 6, Expected = 6
Coin count test passed for player 0!

**Checking the state of player 1 to see if the Cutpurse card played by player 0 changed the other players' state.**

Hand count = 0, Expected = -1
Hand count is incorrect for player 1.
Hand count test failed for player 1!

Deck count = 10, Expected = 10
Deck count test passed for player 1!

Coins = 6, Expected = 4
Coin count is incorrect for player 1.
Coin count test failed for player 1!

Checking that Kingdom and Victory cards counts did not change due to Smithy card being played.
Kingdom and Victory card test passed!

--------------------------------------------------------------------------------

------------------------------TESTING Card: Sea Hag -----------------------------------
TEST: Each other player discards the top card from their deck and gains a curse card. The curse card is placed on top of the deck.
Hand count = 5, Expected = 5
Hand count test passed for player 0!

Deck count = 5, Expected = 5
Deck count test passed for player 0!

Coins = 4, Expected = 4
Coin count test passed for player 0!

**Checking the state of player 1 to ensure the Sea Hag card played by player 0 changed the other players' state.**

Hand count = 0, Expected = 0
Hand count test passed for player 1!

Deck count = 7, Expected = 10
Deck count is incorrect for player 1.
Deck count test failed for player 1!

Coins = 4, Expected = 4
Coin count test passed for player 1!

Checking that Kingdom and Victory cards counts did not change due to Smithy card being played.
Kingdom and Victory card test passed!

--------------------------------------------------------------------------------

File 'dominion.c'
Lines executed:29.92% of 595
Branches executed:31.55% of 412
Taken at least once:22.33% of 412
Calls executed:22.22% of 90
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 700 returned 100% blocks executed 83%
      700:    8:int compare(const void* a, const void* b) {
      700:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 700
    #####:   10:    return 1;
      700:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 250 (fallthrough)
branch  1 taken 450
      250:   12:    return -1;
      450:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 25 returned 100% blocks executed 88%
       25:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       25:   44:  SelectStream(1);
call    0 returned 25
       25:   45:  PutSeed((long)randomSeed);
call    0 returned 25
        -:   46:  
        -:   47:  //check number of players
       25:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 25 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 25
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       25:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      275:   57:  for (i = 0; i < 10; i++)
branch  0 taken 250
branch  1 taken 25 (fallthrough)
        -:   58:    {
     2750:   59:      for (j = 0; j < 10; j++)
branch  0 taken 2500
branch  1 taken 250 (fallthrough)
        -:   60:        {
     2500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 2250 (fallthrough)
branch  1 taken 250
branch  2 taken 0 (fallthrough)
branch  3 taken 2250
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       25:   73:  if (numPlayers == 2)
branch  0 taken 25 (fallthrough)
branch  1 taken 0
        -:   74:    {
       25:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       25:   87:  if (numPlayers == 2)
branch  0 taken 25 (fallthrough)
branch  1 taken 0
        -:   88:    {
       25:   89:      state->supplyCount[estate] = 8;
       25:   90:      state->supplyCount[duchy] = 8;
       25:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       25:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       25:  102:  state->supplyCount[silver] = 40;
       25:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      525:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 500
branch  1 taken 25 (fallthrough)
        -:  107:    {
     4125:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 3875
branch  1 taken 250 (fallthrough)
        -:  109:	{
     3875:  110:	  if (kingdomCards[j] == i)
branch  0 taken 250 (fallthrough)
branch  1 taken 3625
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      250:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 230 (fallthrough)
branch  1 taken 20
branch  2 taken 20 (fallthrough)
branch  3 taken 210
        -:  114:		{
       80:  115:		  if (numPlayers == 2){ 
branch  0 taken 40 (fallthrough)
branch  1 taken 0
       40:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      210:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      250:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     3625:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       75:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 50
branch  1 taken 25 (fallthrough)
        -:  139:    {
       50:  140:      state->deckCount[i] = 0;
      200:  141:      for (j = 0; j < 3; j++)
branch  0 taken 150
branch  1 taken 50 (fallthrough)
        -:  142:	{
      150:  143:	  state->deck[i][j] = estate;
      150:  144:	  state->deckCount[i]++;
        -:  145:	}
      400:  146:      for (j = 3; j < 10; j++)
branch  0 taken 350
branch  1 taken 50 (fallthrough)
        -:  147:	{
      350:  148:	  state->deck[i][j] = copper;
      350:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       75:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 50
branch  1 taken 25 (fallthrough)
        -:  155:    {
       50:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 50
branch  1 taken 0 (fallthrough)
branch  2 taken 50
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       75:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 50
branch  1 taken 25 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       50:  166:      state->handCount[i] = 0;
       50:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      700:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 675
branch  1 taken 25 (fallthrough)
        -:  177:    {
      675:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       25:  182:  state->outpostPlayed = 0;
       25:  183:  state->phase = 0;
       25:  184:  state->numActions = 1;
       25:  185:  state->numBuys = 1;
       25:  186:  state->playedCardCount = 0;
       25:  187:  state->whoseTurn = 0;
       25:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      150:  192:  for (it = 0; it < 5; it++){
branch  0 taken 125
branch  1 taken 25 (fallthrough)
      125:  193:    drawCard(state->whoseTurn, state);
call    0 returned 125
        -:  194:  }
        -:  195:
       25:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 25
        -:  197:
       25:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 54 returned 100% blocks executed 100%
       54:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       54:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       54:  209:  if (state->deckCount[player] < 1)
branch  0 taken 4 (fallthrough)
branch  1 taken 50
        4:  210:    return -1;
       50:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 50
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      600:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 500
branch  1 taken 50 (fallthrough)
      500:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 500
      500:  216:    newDeck[newDeckPos] = state->deck[player][card];
      500:  217:    newDeckPos++;
     1750:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 1250
branch  1 taken 500 (fallthrough)
     1250:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      500:  221:    state->deckCount[player]--;
        -:  222:  }
      550:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 500
branch  1 taken 50 (fallthrough)
      500:  224:    state->deck[player][i] = newDeck[i];
      500:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       50:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 5 returned 100% blocks executed 47%
        5:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        5:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        5:  237:  if (state->phase != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        5:  243:  if ( state->numActions < 1 )
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        5:  249:  card = handCard(handPos, state);
call    0 returned 5
        -:  250:	
        -:  251:  //check if selected card is an action
        5:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 0 (fallthrough)
branch  1 taken 5
branch  2 never executed
branch  3 never executed
        -:  253:    {
        5:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 5 returned 100% blocks executed 100%
        5:  315:int handCard(int handPos, struct gameState *state) {
        5:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 5
        5:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 90 returned 100% blocks executed 100%
       90:  320:int supplyCount(int card, struct gameState *state) {
       90:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 10 returned 100% blocks executed 100%
       10:  346:int whoseTurn(struct gameState *state) {
       10:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 188 returned 100% blocks executed 85%
      188:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      188:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 2 (fallthrough)
branch  1 taken 186
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        2:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0
branch  1 taken 2 (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 2
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      186:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      186:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      186:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      186:  576:    state->deckCount[player]--;
      186:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      186:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
    #####:  587:    case curse:
    #####:  588:      return 0;
    #####:  589:    case estate:
    #####:  590:      return 2;
    #####:  591:    case duchy:
    #####:  592:      return 5;
    #####:  593:    case province:
    #####:  594:      return 8;
    #####:  595:    case copper:
    #####:  596:      return 0;
    #####:  597:    case silver:
    #####:  598:      return 3;
    #####:  599:    case gold:
    #####:  600:      return 6;
    #####:  601:    case adventurer:
    #####:  602:      return 6;
    #####:  603:    case council_room:
    #####:  604:      return 5;
    #####:  605:    case feast:
    #####:  606:      return 4;
    #####:  607:    case gardens:
    #####:  608:      return 4;
    #####:  609:    case mine:
    #####:  610:      return 5;
    #####:  611:    case remodel:
    #####:  612:      return 4;
    #####:  613:    case smithy:
    #####:  614:      return 4;
    #####:  615:    case village:
    #####:  616:      return 3;
    #####:  617:    case baron:
    #####:  618:      return 4;
    #####:  619:    case great_hall:
    #####:  620:      return 3;
    #####:  621:    case minion:
    #####:  622:      return 5;
    #####:  623:    case steward:
    #####:  624:      return 3;
    #####:  625:    case tribute:
    #####:  626:      return 5;
    #####:  627:    case ambassador:
    #####:  628:      return 3;
    #####:  629:    case cutpurse:
    #####:  630:      return 4;
    #####:  631:    case embargo: 
    #####:  632:      return 2;
    #####:  633:    case outpost:
    #####:  634:      return 5;
    #####:  635:    case salvager:
    #####:  636:      return 4;
    #####:  637:    case sea_hag:
    #####:  638:      return 4;
    #####:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:// Assignment 2 -- REFACTORED FUNCTIONS HERE
        -:  647:
        -:  648:/* * * * * * * * * * * * * * * * * * * * * * * * * 
        -:  649:* Name: playAdventurer
        -:  650:* Input: 5 ints and a struct
        -:  651:* Output: an int
        -:  652:* Description: Performs the actions for Adventurer
        -:  653:*  as required by the Dominion rules.
        -:  654:* * * * * * * * * * * * * * * * * * * * * * * * */
function playAdventurer called 2 returned 100% blocks executed 73%
        2:  655:int playAdventurer(int cardDrawn, int drawntreasure, int currentPlayer, int *temphand, struct gameState *state, int z)
        -:  656:{
        8:  657:  while (drawntreasure < 2) {
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        4:  658:    if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:  659:      shuffle(currentPlayer, state);
call    0 returned 2
        -:  660:    }
        4:  661:    drawCard(currentPlayer, state);
call    0 returned 4
        4:  662:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        4:  663:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 4
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        4:  664:      drawntreasure++;
        -:  665:    else {
    #####:  666:      temphand[z]=cardDrawn;
    #####:  667:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  668:      z++;
        -:  669:    }
        -:  670:  }
        -:  671:  
        4:  672:  while (z-1 >= 0) {
branch  0 taken 0
branch  1 taken 2 (fallthrough)
    #####:  673:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  674:    z=z-1;
        -:  675:  }
        2:  676:  return -1;
        -:  677:}
        -:  678:
        -:  679:/* * * * * * * * * * * * * * * * * * * * * * * * * 
        -:  680:* Name: playSmithy
        -:  681:* Input: 2 ints and a struct
        -:  682:* Output: an int
        -:  683:* Description: Performs the actions for Smithy
        -:  684:*  as required by the Dominion rules.
        -:  685:* * * * * * * * * * * * * * * * * * * * * * * * */
function playSmithy called 1 returned 100% blocks executed 100%
        1:  686:int playSmithy(int currentPlayer, struct gameState *state, int handPos) {
        -:  687:  int i;
        -:  688:  //+3 Cards
        5:  689:  for (i = 0; i <= 3; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  690:    drawCard(currentPlayer, state);
call    0 returned 4
        -:  691:  }
        -:  692:      
        -:  693:  //discard card from hand
        1:  694:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 1
        1:  695:  return 0;
        -:  696:}
        -:  697:
        -:  698:/* * * * * * * * * * * * * * * * * * * * * * * * * 
        -:  699:* Name: playVillage
        -:  700:* Input: 2 ints and a struct
        -:  701:* Output: an int
        -:  702:* Description: Performs the actions for Village
        -:  703:*  as required by the Dominion rules.
        -:  704:* * * * * * * * * * * * * * * * * * * * * * * * */
function playVillage called 0 returned 0% blocks executed 0%
    #####:  705:int playVillage(int currentPlayer, struct gameState *state, int handPos) {
        -:  706:  //+1 Card
    #####:  707:  drawCard(currentPlayer, state);
call    0 never executed
        -:  708:      
        -:  709:  //+2 Actions
    #####:  710:  state->numActions = state->numActions++;
        -:  711:      
        -:  712:  //discard played card from hand
    #####:  713:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  714:  return 0;
        -:  715:}
        -:  716:
        -:  717:/* * * * * * * * * * * * * * * * * * * * * * * * * 
        -:  718:* Name: playMinion
        -:  719:* Input: 4 ints and a struct
        -:  720:* Output: an int
        -:  721:* Description: Performs the actions for Minion
        -:  722:*  as required by the Dominion rules.
        -:  723:* * * * * * * * * * * * * * * * * * * * * * * * */
function playMinion called 0 returned 0% blocks executed 0%
    #####:  724:int playMinion(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
        -:  725:  int h, i, j;
        -:  726:
        -:  727:  //+1 action
    #####:  728:  state->numActions++;
        -:  729:      
        -:  730:  //discard card from hand
    #####:  731:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  732:      
    #####:  733:  if (choice2) {    //+2 coins
branch  0 never executed
branch  1 never executed
    #####:  734:    state->coins = state->coins + 2;
    #####:  735:  } else if (choice1) {   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  736:  
        -:  737:    //discard hand
    #####:  738:    while (numHandCards(state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  739:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  740:    }
        -:  741:        
        -:  742:    //draw 4
    #####:  743:    for (h = 0; h < 4; h++) {
branch  0 never executed
branch  1 never executed
    #####:  744:      drawCard(currentPlayer, state);
call    0 never executed
        -:  745:    }
        -:  746:        
        -:  747:    //other players discard hand and redraw if hand size > 4
    #####:  748:    for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  749:      if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  750:        if ( state->handCount[i] > 4 ) {
branch  0 never executed
branch  1 never executed
        -:  751:          //discard hand
    #####:  752:          while (state->handCount[i] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  753:            discardCard(handPos, i, state, 0);
call    0 never executed
        -:  754:          }
        -:  755:              
        -:  756:          //draw 4
    #####:  757:          for (j = 0; j < 4; j++) {
branch  0 never executed
branch  1 never executed
    #####:  758:            drawCard(i, state);
call    0 never executed
        -:  759:          }
        -:  760:        }
        -:  761:      }
        -:  762:    }
        -:  763:  }
    #####:  764:  return 0;
        -:  765:}
        -:  766:
        -:  767:/* * * * * * * * * * * * * * * * * * * * * * * * * 
        -:  768:* Name: playRemodel
        -:  769:* Input: 4 ints and a struct
        -:  770:* Output: an int
        -:  771:* Description: Performs the actions for Remodel
        -:  772:*  as required by the Dominion rules.
        -:  773:* * * * * * * * * * * * * * * * * * * * * * * * */
function playRemodel called 0 returned 0% blocks executed 0%
    #####:  774:int playRemodel(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
        -:  775:  int i;
    #####:  776:  int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  777:
    #####:  778:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  779:    return -1;
        -:  780:  }
        -:  781:
    #####:  782:  gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  783:
        -:  784:  //discard card from hand
    #####:  785:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  786:
        -:  787:  //discard trashed card
    #####:  788:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  789:    if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  790:        discardCard(i, currentPlayer, state, 0);      
call    0 never executed
    #####:  791:        break;
        -:  792:    }
        -:  793:  }
    #####:  794:  return 0;
        -:  795:}
        -:  796:
        -:  797:// End of Assignment 2 -- REFACTORED FUNCTIONS HERE
        -:  798:
function cardEffect called 5 returned 100% blocks executed 11%
        5:  799:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  800:{
        -:  801:  int i;
        -:  802:  int j;
        -:  803:  int k;
        -:  804:  int x;
        -:  805:  int index;
        5:  806:  int currentPlayer = whoseTurn(state);
call    0 returned 5
        5:  807:  int nextPlayer = currentPlayer + 1;
        -:  808:
        5:  809:  int tributeRevealedCards[2] = {-1, -1};
        -:  810:  int temphand[MAX_HAND];// moved above the if statement
        5:  811:  int drawntreasure=0;
        -:  812:  int cardDrawn;
        5:  813:  int z = 0;// this is the counter for the temp hand
        5:  814:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####:  815:    nextPlayer = 0;
        -:  816:  }
        -:  817:  
        -:  818:	
        -:  819:  //uses switch to select card and perform actions
        5:  820:  switch( card ) 
branch  0 taken 2
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 1
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 1
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 1
branch 18 taken 0
branch 19 taken 0
        -:  821:    {
        2:  822:    case adventurer:
        -:  823:      // REFACTORED into separate function
        2:  824:      return playAdventurer(cardDrawn, drawntreasure, currentPlayer, temphand, state, z);
call    0 returned 2
        -:  825:			
    #####:  826:    case council_room:
        -:  827:      //+4 Cards
    #####:  828:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  829:	{
    #####:  830:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  831:	}
        -:  832:			
        -:  833:      //+1 Buy
    #####:  834:      state->numBuys++;
        -:  835:			
        -:  836:      //Each other player draws a card
    #####:  837:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  838:	{
    #####:  839:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  840:	    {
    #####:  841:	      drawCard(i, state);
call    0 never executed
        -:  842:	    }
        -:  843:	}
        -:  844:			
        -:  845:      //put played card in played card pile
    #####:  846:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  847:			
    #####:  848:      return 0;
        -:  849:			
    #####:  850:    case feast:
        -:  851:      //gain card with cost up to 5
        -:  852:      //Backup hand
    #####:  853:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  854:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  855:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  856:      }
        -:  857:      //Backup hand
        -:  858:
        -:  859:      //Update Coins for Buy
    #####:  860:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  861:      x = 1;//Condition to loop on
    #####:  862:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  863:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  864:	  if (DEBUG)
        -:  865:	    printf("None of that card left, sorry!\n");
        -:  866:
        -:  867:	  if (DEBUG){
        -:  868:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  869:	  }
        -:  870:	}
    #####:  871:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  872:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  873:
        -:  874:	  if (DEBUG){
        -:  875:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  876:	  }
        -:  877:	}
        -:  878:	else{
        -:  879:
        -:  880:	  if (DEBUG){
        -:  881:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  882:	  }
        -:  883:
    #####:  884:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  885:	  x = 0;//No more buying cards
        -:  886:
        -:  887:	  if (DEBUG){
        -:  888:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  889:	  }
        -:  890:
        -:  891:	}
        -:  892:      }     
        -:  893:
        -:  894:      //Reset Hand
    #####:  895:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  896:	state->hand[currentPlayer][i] = temphand[i];
    #####:  897:	temphand[i] = -1;
        -:  898:      }
        -:  899:      //Reset Hand
        -:  900:      			
    #####:  901:      return 0;
        -:  902:			
    #####:  903:    case gardens:
    #####:  904:      return -1;
        -:  905:			
    #####:  906:    case mine:
    #####:  907:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  908:
    #####:  909:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  910:	{
    #####:  911:	  return -1;
        -:  912:	}
        -:  913:		
    #####:  914:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  915:	{
    #####:  916:	  return -1;
        -:  917:	}
        -:  918:
    #####:  919:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  920:	{
    #####:  921:	  return -1;
        -:  922:	}
        -:  923:
    #####:  924:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  925:
        -:  926:      //discard card from hand
    #####:  927:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  928:
        -:  929:      //discard trashed card
    #####:  930:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  931:	{
    #####:  932:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  933:	    {
    #####:  934:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  935:	      break;
        -:  936:	    }
        -:  937:	}
        -:  938:			
    #####:  939:      return 0;
        -:  940:			
    #####:  941:    case remodel:
        -:  942:      // REFACTORED into separate function
    #####:  943:      return playRemodel(currentPlayer, state, choice1, choice2, handPos);
call    0 never executed
        -:  944:    
        1:  945:    case smithy:
        -:  946:      // REFACTORED into separate function
        1:  947:      return playSmithy(currentPlayer, state, handPos);
call    0 returned 1
        -:  948:      
    #####:  949:    case village:
        -:  950:      // REFACTORED into separate function
    #####:  951:      return playVillage(currentPlayer, state, handPos);
call    0 never executed
        -:  952:		
    #####:  953:    case baron:
    #####:  954:      state->numBuys++;//Increase buys by 1!
    #####:  955:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  956:	int p = 0;//Iterator for hand!
    #####:  957:	int card_not_discarded = 1;//Flag for discard set!
    #####:  958:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  959:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  960:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  961:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  962:	    state->discardCount[currentPlayer]++;
    #####:  963:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  964:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  965:	    }
    #####:  966:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  967:	    state->handCount[currentPlayer]--;
    #####:  968:	    card_not_discarded = 0;//Exit the loop
        -:  969:	  }
    #####:  970:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  971:	    if(DEBUG) {
        -:  972:	      printf("No estate cards in your hand, invalid choice\n");
        -:  973:	      printf("Must gain an estate if there are any\n");
        -:  974:	    }
    #####:  975:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  976:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  977:	      state->supplyCount[estate]--;//Decrement estates
    #####:  978:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  979:		isGameOver(state);
call    0 never executed
        -:  980:	      }
        -:  981:	    }
    #####:  982:	    card_not_discarded = 0;//Exit the loop
        -:  983:	  }
        -:  984:			    
        -:  985:	  else{
    #####:  986:	    p++;//Next card
        -:  987:	  }
        -:  988:	}
        -:  989:      }
        -:  990:			    
        -:  991:      else{
    #####:  992:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  993:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  994:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  995:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  996:	    isGameOver(state);
call    0 never executed
        -:  997:	  }
        -:  998:	}
        -:  999:      }
        -: 1000:	    
        -: 1001:      
    #####: 1002:      return 0;
        -: 1003:		
    #####: 1004:    case great_hall:
        -: 1005:      //+1 Card
    #####: 1006:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1007:			
        -: 1008:      //+1 Actions
    #####: 1009:      state->numActions++;
        -: 1010:			
        -: 1011:      //discard card from hand
    #####: 1012:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1013:      return 0;
        -: 1014:		
    #####: 1015:    case minion:
        -: 1016:      // REFACTORED into separate function
    #####: 1017:      return playMinion(currentPlayer, state, choice1, choice2, handPos);
call    0 never executed
        -: 1018:		
    #####: 1019:    case tribute:
    #####: 1020:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1021:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1022:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:	  state->deckCount[nextPlayer]--;
        -: 1024:	}
    #####: 1025:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1026:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:	  state->discardCount[nextPlayer]--;
        -: 1028:	}
        -: 1029:	else{
        -: 1030:	  //No Card to Reveal
        -: 1031:	  if (DEBUG){
        -: 1032:	    printf("No cards to reveal\n");
        -: 1033:	  }
        -: 1034:	}
        -: 1035:      }
        -: 1036:	    
        -: 1037:      else{
    #####: 1038:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1039:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:	    state->deckCount[nextPlayer]++;
    #####: 1042:	    state->discard[nextPlayer][i] = -1;
    #####: 1043:	    state->discardCount[nextPlayer]--;
        -: 1044:	  }
        -: 1045:			    
    #####: 1046:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1047:	} 
    #####: 1048:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
    #####: 1051:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:	state->deckCount[nextPlayer]--;
        -: 1054:      }    
        -: 1055:		       
    #####: 1056:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1057:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:	state->playedCardCount++;
    #####: 1059:	tributeRevealedCards[1] = -1;
        -: 1060:      }
        -: 1061:
    #####: 1062:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1063:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1064:	  state->coins += 2;
        -: 1065:	}
        -: 1066:		    
    #####: 1067:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1068:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1069:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:	}
        -: 1071:	else{//Action Card
    #####: 1072:	  state->numActions = state->numActions + 2;
        -: 1073:	}
        -: 1074:      }
        -: 1075:	    
    #####: 1076:      return 0;
        -: 1077:		
    #####: 1078:    case ambassador:
    #####: 1079:      j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1082:	{
    #####: 1083:	  return -1;				
        -: 1084:	}
        -: 1085:
    #####: 1086:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:
    #####: 1091:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1092:	{
    #####: 1093:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1094:	    {
    #####: 1095:	      j++;
        -: 1096:	    }
        -: 1097:	}
    #####: 1098:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
    #####: 1100:	  return -1;				
        -: 1101:	}
        -: 1102:
        -: 1103:      if (DEBUG) 
        -: 1104:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:      //increase supply count for choosen card by amount being discarded
    #####: 1107:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:			
        -: 1109:      //each other player gains a copy of revealed card
    #####: 1110:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1111:	{
    #####: 1112:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1113:	    {
    #####: 1114:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1115:	    }
        -: 1116:	}
        -: 1117:
        -: 1118:      //discard played card from hand
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1120:
        -: 1121:      //trash copies of cards returned to supply
    #####: 1122:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
    #####: 1124:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	    {
    #####: 1126:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1127:		{
    #####: 1128:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1129:		  break;
        -: 1130:		}
        -: 1131:	    }
        -: 1132:	}			
        -: 1133:
    #####: 1134:      return 0;
        -: 1135:		
        1: 1136:    case cutpurse:
        -: 1137:
        1: 1138:      updateCoins(currentPlayer, state, 2);
call    0 returned 1
        3: 1139:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -: 1140:	{
        2: 1141:	  if (i != currentPlayer)
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -: 1142:	    {
        1: 1143:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 taken 0
branch  1 taken 1 (fallthrough)
        -: 1144:		{
    #####: 1145:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1146:		    {
    #####: 1147:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1148:		      break;
        -: 1149:		    }
    #####: 1150:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1151:		    {
    #####: 1152:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1153:			{
        -: 1154:			  if (DEBUG)
        -: 1155:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1156:			}	
    #####: 1157:		      break;
        -: 1158:		    }		
        -: 1159:		}
        -: 1160:					
        -: 1161:	    }
        -: 1162:				
        -: 1163:	}				
        -: 1164:
        -: 1165:      //discard played card from hand
        1: 1166:      discardCard(handPos, currentPlayer, state, 0);			
call    0 returned 1
        -: 1167:
        1: 1168:      return 0;
        -: 1169:
        -: 1170:		
    #####: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
    #####: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
    #####: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
        -: 1202:	  //gain coins equal to trashed card
    #####: 1203:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1204:	  //trash card
    #####: 1205:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:	}
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        1: 1212:    case sea_hag:
        3: 1213:      for (i = 0; i < state->numPlayers; i++){
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2: 1214:	if (i != currentPlayer){
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        1: 1216:	  state->discardCount[i]++;
        1: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
        1: 1220:      return 0;
        -: 1221:		
    #####: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
function discardCard called 37 returned 100% blocks executed 89%
       37: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
       37: 1260:  if (trashFlag < 1)
branch  0 taken 37 (fallthrough)
branch  1 taken 0
        -: 1261:    {
        -: 1262:      //add card to played pile
       37: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       37: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
       37: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
       37: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0 (fallthrough)
branch  1 taken 37
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
       37: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 2 (fallthrough)
branch  1 taken 35
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
        2: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
       35: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
       35: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
       35: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
       37: 1291:  return 0;
        -: 1292:}
        -: 1293:
function gainCard called 90 returned 100% blocks executed 90%
       90: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
       90: 1299:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 90
branch  1 taken 0 (fallthrough)
branch  2 taken 90
        -: 1300:    {
    #####: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
       90: 1309:  if (toFlag == 1)
branch  0 taken 30 (fallthrough)
branch  1 taken 60
        -: 1310:    {
       30: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       30: 1312:      state->deckCount[player]++;
        -: 1313:    }
       60: 1314:  else if (toFlag == 2)
branch  0 taken 30 (fallthrough)
branch  1 taken 30
        -: 1315:    {
       30: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       30: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
       30: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       30: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
       90: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
       90: 1328:  return 0;
        -: 1329:}
        -: 1330:
function updateCoins called 26 returned 100% blocks executed 82%
       26: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
       26: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
      156: 1339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 130
branch  1 taken 26 (fallthrough)
        -: 1340:    {
      130: 1341:      if (state->hand[player][i] == copper)
branch  0 taken 104 (fallthrough)
branch  1 taken 26
        -: 1342:	{
      104: 1343:	  state->coins += 1;
        -: 1344:	}
       26: 1345:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 26
        -: 1346:	{
    #####: 1347:	  state->coins += 2;
        -: 1348:	}
       26: 1349:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 26
        -: 1350:	{
    #####: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
       26: 1356:  state->coins += bonus;
        -: 1357:
       26: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:
